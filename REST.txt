REST=RESTFUL
SOAP - Pasado, seguridad
	vs
RESTFUL - cada quien lo crea, no se audita, permite conexión JSON
REST - Protocolo

REST usa POST, ya que estoy enviado data al servidor, para obtener una respuesta.
**GET, es usado normalmente para para traer contenido pero no se acostumbra envíar.

------REST CLIENT-----
Es una aplicación que me permite hacer pruebas POST a una URL, extensiones para Chrome o Firefox


-------USO SERVICIO REST-------
Recibo un JSON y debo deserializarlo para crear un objeto 

--------JACKSON-------------
https://github.com/FasterXML/jackson
Standard JSON Library for Java, nos permite parsear (binding) de un JSON a un Objeto Java
1.- Crear el Objeto en Java con las variables y metodos para guardar nuestr JSON
2.- Crear Object Mapper.
3.- Realizar Deserializacion con mapper();

SERIALIZAR  => OBJECT to JSON
DESERIALIZAR => JSON to OBJECT

---------------REST------------------
Se consume desde cualquier tipo de cliente.
Rest se autodocumenta.
"Arquitectura de Cliente Servidor consumiendo datos"
REST:
	-Se basa en un interfaz uniforme con 4 conceptos:
		
		RECURSO-tiene su URI unica y su especificación

		1.Recursos identificados por medio de URIS (Universal Resource Identifiers), las uris son unicas para cada recurso
		  URI se divide en dos ramas URL, URN
		
		2.Manipulacion de Recursos a través de representaciones (XML,JSON), me responde a un recurso con una representacion.

		3. Mensajes Autodescriptivos (meta-data content/type), al acceder a la URI el servidor envía el recurso con metadatos que describen a los datos por ejemplo el formato que lleva como json.

		4. Autodocumentable (HATEOAS)

NOTA: No usar verbos en las URI ej. /addUser en lugar de manejarlo por uris, hacer uso de los metodos http, add, get, put, delete.

Para un URI buena practica:
/ServletCero -- Así solo es un GET
Si lo llamo enviandole cosas será un POST
Por eso el servlet tiene un doGET y un doPOST para el mismo URI
HTTP ya provee una interface universal con metodos para poder realizar operaciones como delete(borrar), put(actualizar), en el mismo URI